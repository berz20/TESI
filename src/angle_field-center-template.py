import qutip as qt
import matplotlib.pyplot as plt
import numpy as np
from hamiltonians import SpinHamiltonian
from scipy.optimize import curve_fit
OUTIMGDIR = "../output/prova/"

ham = SpinHamiltonian()

def Deviation_plotter():
    # B = np.array([0.00687,0.00813,0.00952,0.01252,0.01749,0.01952,0.02315,0.03063])
    B = np.linspace(0,0.100,100)
    sham = np.vectorize(ham.transitionFreqs, otypes=[np.ndarray])
    freqs = np.array(sham(B,0,0))
    freqs = np.array(freqs.tolist())
    freqs_dev_90 = np.array(sham(B,90,0))
    freqs_dev_90 = np.array(freqs_dev_90.tolist())
    freqs_dev_60 = np.array(sham(B,60,0))
    freqs_dev_60 = np.array(freqs_dev_60.tolist())
    freqs_dev_30 = np.array(sham(B,30,0))
    freqs_dev_30 = np.array(freqs_dev_30.tolist())

    fig = plt.figure(figsize=(8,8))
    ax = plt.subplot()
    
    ax.set_xlabel('$B \ [T]$')
    ax.set_ylabel('$Transition \ Frequency \ [GHz]$')
    ax.plot(B, freqs[:,0],color='black', label='$B_{//}$')
    ax.plot(B, freqs[:,1],color='black')
    ax.plot(B, freqs_dev_30[:,0],color='tab:blue', label='$30\degree$')
    ax.plot(B, freqs_dev_30[:,1],color='tab:blue')
    ax.plot(B, freqs_dev_60[:,0],color='red', label='$60\degree$')
    ax.plot(B, freqs_dev_60[:,1],color='red')
    ax.plot(B, freqs_dev_90[:,0],color='green', label='$90\degree$')
    ax.plot(B, freqs_dev_90[:,1],color='green')
    ax.legend()
    plt.grid()
    plt.savefig(f'{OUTIMGDIR}/prova_deg.pdf')

# ax.set_xlabel('$B \ [T]$')
# ax.set_ylabel('$Transition \ Frequency \ [GHz]$')

# def Deviation_plotter(B, ang):
#     # B = np.linspace(0,0.033,8)
#     sham = np.vectorize(ham.transitionFreqs, otypes=[np.ndarray])
#     freqs = np.array(sham(B,0,0))
#     freqs = np.array(freqs.tolist())
#     freqs_dev_90 = np.array(sham(B,90,0))
#     freqs_dev_90 = np.array(freqs_dev_90.tolist())
#     freqs_dev_60 = np.array(sham(B,ang,0))
#     freqs_dev_60 = np.array(freqs_dev_60.tolist())
#     return freqs_dev_60[:,2]
#
# fig = plt.figure(figsize=(8,8))
# ax = plt.subplot()
# B = np.array([0.00687,0.00813,0.00952,0.01252,0.01749,0.01952,0.02315,0.03063])
# pe = np.array([2.87113377, 2.87192985, 2.87230406, 2.87491283, 2.88061843, 2.88221564, 2.8879208,  2.89743486])
# pi = np.array([2.87496219, 2.87655858, 2.87935027, 2.88516066, 2.89951699, 2.90751625, 2.92280513, 2.96423393])
# ipe = np.array([2.87287208, 2.87368187, 2.87495803, 2.8772975,  2.8870353,  2.8881035, 2.89328372, 2.90901996])
# ipi = np.array([2.87402114, 2.87609819, 2.87859271, 2.88518905, 2.8967141,  2.90591837, 2.92130431, 2.96311924])
#
# pe_err = np.array([0.00161453 ,0.00155891 ,0.00156834 ,0.00143514 ,0.00152938 ,0.00135299 ,0.00141788 ,0.00117153])
# pi_err = np.array([0.00163125 ,0.00173223 ,0.00162217 ,0.00173049 ,0.00171484 ,0.00163391 ,0.00159602 ,0.00090091])
# ipe_err = np.array([0.00128372, 0.00140306, 0.00132992, 0.00140407, 0.00149457, 0.00111725, 0.001253  , 0.00125552])
# ipi_err = np.array([0.00158091, 0.00154795, 0.00170369, 0.00136773, 0.00136432, 0.00122911, 0.00186335, 0.00144844])
#
# freqs_dev_60 = Deviation_plotter(B,60)
# popt_ext, pcov_ext = curve_fit(Deviation_plotter, B, pe, sigma= pe_err)
# perr_ext = np.sqrt(np.diag(pcov_ext))
# popt_int, pcov_int = curve_fit(Deviation_plotter, B, pi, sigma= pi_err)
# perr_int = np.sqrt(np.diag(pcov_int))
# int_popt_int, int_pcov_int = curve_fit(Deviation_plotter, B, ipi, sigma= ipe_err)
# int_perr_int = np.sqrt(np.diag(int_pcov_int))
# int_popt_ext, int_pcov_ext = curve_fit(Deviation_plotter, B, ipe, sigma= ipi_err)
# int_perr_ext = np.sqrt(np.diag(int_pcov_ext))
# fit_ext = Deviation_plotter(B, *popt_ext)
# fit_int = Deviation_plotter(B, *popt_int) 
# int_fit_int = Deviation_plotter(B, *int_popt_int)
# int_fit_ext = Deviation_plotter(B, *int_popt_ext)
#               
# # ax.errorbar(B, peak_ext_up, yerr=peak_ext_up_err,capsize=5, fmt='.', color='black', label="Resonance's peaks positions")
# # ax.errorbar(B, peak_ext_down, yerr=peak_ext_down_err,capsize=5, fmt='.', color='black')
# # ax.errorbar(B, peak_int_up, yerr=peak_int_up_err,capsize=5, fmt='.', color='red')
# # ax.errorbar(B, peak_int_down, yerr=peak_int_down_err,capsize=5, fmt='.', color='red')
# ax.errorbar(B, pe, yerr=pe_err,fmt='x', color='black', label="Peak's centers") 
# ax.errorbar(B, pi, yerr=pi_err,fmt='x', color='red') 
# # ax.errorbar(B, int_peak_ext_up, yerr=int_peak_ext_up_err,capsize=5, fmt='.', color='blue')
# # ax.errorbar(B, int_peak_ext_down, yerr=int_peak_ext_down_err,capsize=5, fmt='.', color='blue')
# # ax.errorbar(B, int_peak_int_up, yerr=int_peak_int_up_err,capsize=5, fmt='.', color='green')
# # ax.errorbar(B, int_peak_int_down, yerr=int_peak_int_down_err,capsize=5, fmt='.', color='green')
# ax.errorbar(B, ipe, yerr=ipi_err,fmt='x', color='blue') 
# ax.errorbar(B, ipi, yerr=ipe_err,fmt='x', color='green') 
# ax.plot(B,fit_ext,color='black', label=popt_ext)
# ax.plot(B,fit_int,color='red', label=popt_int)
# ax.plot(B,int_fit_ext,color='blue', label=int_popt_ext)
# ax.plot(B,int_fit_int,color='green', label=int_popt_int)
# ax.axhline(2.87, c='black', linestyle='dotted', label='$2.87 \ GHz$')
# ax.legend()
# # ax.set_xlabel('External magnetic field [mT]')
# # ax.set_ylabel('[GHz]')
# # ax.plot(B, freqs_dev_60[:,0])
# # ax.plot(B, freqs_dev_60[:,1])
# # ax.plot(B, freqs_dev_60)
# # ax.plot(B, freqs_dev_90[:,0])
# # ax.plot(B, freqs_dev_90[:,1])
# # ax.plot(B, freqs_dev_90[:,2])
# print('ang_ext',popt_ext)
# print('ang_int',popt_int)
# print('int_ang_ext',int_popt_ext)
# print('int_ang_int',int_popt_int)
# plt.show()
if __name__ == '__main__':
    Deviation_plotter()
